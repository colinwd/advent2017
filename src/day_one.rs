use std::string::String;

pub fn input() -> String {
    return String::from
}

pub fn solve(input: String) -> u32 {
    let mut iter = input.chars();
    let mut sum: u32 = 0;
    let mut previous = iter.next().unwrap().to_digit(10).unwrap();
    let first = iter.nth(0).unwrap().to_digit(10).unwrap();

    for c in iter {
        let num = c.to_digit(10).unwrap();

        if num == previous {
            sum = sum + num
        }

        previous = num
    }

    if previous == first {
        sum = sum + first
    }

    return sum
}

pub fn solve_two() -> u32 {
    let input :Vec<u32> = input().chars().map(|c| c.to_digit(10).unwrap()).collect();
    let half = input.len() / 2;
    let first_half = input.get(0..half).unwrap();
    let second_half = input.get(half..input.len()).unwrap();

    let mut sum = 0;
    for (i, &digit) in first_half.iter().enumerate() {
        if digit == second_half[i] {
            sum = sum + (digit * 2)
        }
    }

    return sum
}